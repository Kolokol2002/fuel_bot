from aiogram import types
from aiogram.dispatcher import FSMContext

from data_base import sqlite_db
from loader import dp
from aiogram.dispatcher.filters import Text

from keyboards.inline import inline_back
from keyboards.default import def_kb

from states import For_km_rgn_fuel


@dp.message_handler(Text(equals=['‚úÖ–ö–º', '‚úÖ–ì—Ä–Ω', '‚úÖ–õ—ñ—Ç—Ä—ñ–≤'], ignore_case=True))
async def km_grn_fuel(message: types.Message):
    if message.text == '‚úÖ–ö–º':
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª–æ–º–µ—Ç—Ä–∏:')
        await For_km_rgn_fuel.km.set()

    elif message.text == '‚úÖ–ì—Ä–Ω':
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –≥—Ä–∏–≤–µ–Ω—å –≤–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏:')
        await For_km_rgn_fuel.grn.set()

    elif message.text == '‚úÖ–õ—ñ—Ç—Ä—ñ–≤':
        await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –ª—ñ—Ç—Ä—ñ–≤ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏:')
        await For_km_rgn_fuel.fuel.set()


@dp.message_handler(state=For_km_rgn_fuel.km)
async def km(message: types.Message, state: FSMContext):
    try:
        list_cost_middle = await sqlite_db.sql_read(message)
        medium_fuel = float(list_cost_middle[2])
        cost_fuel = float(list_cost_middle[3])
        fuel_res = round((medium_fuel * int(message.text)) / 100, 1)
        rgn_res = round(fuel_res * cost_fuel, 1)
        await message.reply(f'–ì—Ä–Ω: {rgn_res}\n–¢–æ–ø–ª–∏–≤–∞: {fuel_res}', reply_markup=inline_back)


    except:
        await message.reply('–¶–µ –Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ!', reply_markup=inline_back)


@dp.message_handler(state=For_km_rgn_fuel.grn)
async def grn(message: types.Message, state: FSMContext):
    try:
        list_cost_middle = await sqlite_db.sql_read(message)
        medium_fuel = float(list_cost_middle[2])
        cost_fuel = float(list_cost_middle[3])
        fuel_res = round(float(message.text) / cost_fuel, 1)
        km_res = round((fuel_res * 100) / medium_fuel, 1)
        await message.reply(f'–ö–º: {km_res}\n–õ—ñ—Ç—Ä—ñ–≤: {fuel_res}', reply_markup=inline_back)

    except:
        await message.reply('–¶–µ –Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ!', reply_markup=inline_back)

@dp.message_handler(state=For_km_rgn_fuel.fuel)
async def fuel(message: types.Message, state: FSMContext):
    try:
        list_cost_middle = await sqlite_db.sql_read(message)
        medium_fuel = float(list_cost_middle[2])
        cost_fuel = float(list_cost_middle[3])
        rgn_res = round(float(message.text) * cost_fuel, 1)
        km_res = round((float(message.text) * 100) / medium_fuel, 1)
        await message.reply(f'–ö–º: {km_res}\n–ì—Ä–Ω: {rgn_res}', reply_markup=inline_back)

    except:
        await message.reply('–¶–µ –Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ!', reply_markup=inline_back)


@dp.callback_query_handler(text='back', state='*')
async def next_keyboard(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(text='üîô–ù–∞–∑–∞–¥', reply_markup=def_kb)

    await state.finish()



